
SPI-master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072b  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095b  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006e13  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000062  00000000  00000000  0000895b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000089bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002a3d  00000000  00000000  000089fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	18 d0       	rcall	.+48     	; 0xa6 <main>
  76:	1d c0       	rjmp	.+58     	; 0xb2 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <init_Btn>:
Description:initializes PIN D2 as interrupt triggered by low level
******************************************************************** */
void init_Btn(void)
{
	/* Input port with pull-up */
	DDRD |= (1<<Btn_bit);
  7a:	53 9a       	sbi	0x0a, 3	; 10
	PORTD &= ~(1<<Btn_bit);
  7c:	5b 98       	cbi	0x0b, 3	; 11
  7e:	08 95       	ret

00000080 <init_SPI>:
Outputs:	none
Description:Initialization of SPI pins
******************************************************************** */
void init_SPI()
{
	DDRB = 0x00;
  80:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<SSPin) | (1<<SCKPin) | (1<<MOSIPin) ;  //set MOSI, clock and SlaveSelect as output
  82:	84 b1       	in	r24, 0x04	; 4
  84:	8c 62       	ori	r24, 0x2C	; 44
  86:	84 b9       	out	0x04, r24	; 4
	//DDRB &= ~(1<<MISOPin);											//Set MOSI[MISO of nRF] as Input
	
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) ;				// Enable SPI as master
  88:	8c b5       	in	r24, 0x2c	; 44
  8a:	81 65       	ori	r24, 0x51	; 81
  8c:	8c bd       	out	0x2c, r24	; 44
	
	set_SS_high;							//SlaveSelect To HIGH- not sending any command
  8e:	2a 9a       	sbi	0x05, 2	; 5
  90:	08 95       	ret

00000092 <spi_tranceiver>:
Description:Reads the SPI transceiver buffer
******************************************************************** */
uint8_t spi_tranceiver (uint8_t data)
{
	/* Load data in the buffer */
	SPDR = data;
  92:	8e bd       	out	0x2e, r24	; 46
	/* Wait for the complete transmission */
	while(!(SPSR & (1<<SPIF)));
  94:	0d b4       	in	r0, 0x2d	; 45
  96:	07 fe       	sbrs	r0, 7
  98:	fd cf       	rjmp	.-6      	; 0x94 <spi_tranceiver+0x2>
	/* Return received data */
	return(SPDR);
  9a:	8e b5       	in	r24, 0x2e	; 46
}
  9c:	08 95       	ret

0000009e <send_spi>:
Outputs:	data of the register
Description:Reads the called register
******************************************************************** */
void send_spi(uint8_t data)
{
	set_SS_low;							
  9e:	2a 98       	cbi	0x05, 2	; 5
	spi_tranceiver(data);
  a0:	f8 df       	rcall	.-16     	; 0x92 <spi_tranceiver>
	set_SS_high;		
  a2:	2a 9a       	sbi	0x05, 2	; 5
  a4:	08 95       	ret

000000a6 <main>:
#include "Btn.h"


int main(void)
{
	init_Btn();
  a6:	e9 df       	rcall	.-46     	; 0x7a <init_Btn>
	init_SPI();
  a8:	eb df       	rcall	.-42     	; 0x80 <init_SPI>
  aa:	89 b1       	in	r24, 0x09	; 9
	uint8_t btn_state = 0;
	while (1)
	{
		btn_state = Btn_pin & (1<<Btn_bit);
		send_spi(btn_state);
  ac:	88 70       	andi	r24, 0x08	; 8
  ae:	f7 df       	rcall	.-18     	; 0x9e <send_spi>
  b0:	fc cf       	rjmp	.-8      	; 0xaa <main+0x4>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
