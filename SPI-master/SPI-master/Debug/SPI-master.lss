
SPI-master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092f  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007aa  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000980  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006f5e  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010f  00000000  00000000  00008c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00008d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000028d0  00000000  00000000  00008d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	19 d0       	rcall	.+50     	; 0xa8 <main>
  76:	1c c0       	rjmp	.+56     	; 0xb0 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <init_Btn>:
Description:initializes PIN D2 as interrupt triggered by low level
******************************************************************** */
void init_Btn(void)
{
	/* Input port with pull-up */
	DDRD |= (1<<Btn_bit);
  7a:	53 9a       	sbi	0x0a, 3	; 10
	PORTD &= ~(1<<Btn_bit);
  7c:	5b 98       	cbi	0x0b, 3	; 11
  7e:	08 95       	ret

00000080 <spi_tranceiver>:
Description:Reads the SPI transceiver buffer
******************************************************************** */
uint8_t spi_tranceiver (uint8_t data)
{
	/* Load data in the buffer */
	SPDR = data;
  80:	8e bd       	out	0x2e, r24	; 46
	/* Wait for the complete transmission */
	while(!(SPSR & (1<<SPIF)));
  82:	0d b4       	in	r0, 0x2d	; 45
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <spi_tranceiver+0x2>
	/* Return received data */
	return(SPDR);
  88:	8e b5       	in	r24, 0x2e	; 46
}
  8a:	08 95       	ret

0000008c <send_spi>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	95 e3       	ldi	r25, 0x35	; 53
  8e:	9a 95       	dec	r25
  90:	f1 f7       	brne	.-4      	; 0x8e <send_spi+0x2>
  92:	00 00       	nop
Description:Reads the called register
******************************************************************** */
void send_spi(uint8_t data)
{
	_delay_us(10);						//Delay for 10us
	set_SS_low;							//Set SS Low - nRf starts listening for commands 10us after SS Low
  94:	2a 98       	cbi	0x05, 2	; 5
  96:	90 e4       	ldi	r25, 0x40	; 64
  98:	9a 95       	dec	r25
  9a:	f1 f7       	brne	.-4      	; 0x98 <send_spi+0xc>
	_delay_us(12);						//Delay for 12us
	spi_tranceiver(data);
  9c:	f1 df       	rcall	.-30     	; 0x80 <spi_tranceiver>
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <send_spi+0x14>
	_delay_us(12);						//Delay 12us
	set_SS_high;						//SS High
  a4:	2a 9a       	sbi	0x05, 2	; 5
  a6:	08 95       	ret

000000a8 <main>:
#include "Diagnostics.h"


int main(void)
{
	init_Btn();
  a8:	e8 df       	rcall	.-48     	; 0x7a <init_Btn>
	uint8_t spi_reg = 0;
	while (1)
	{
		//spi_reg = Btn_pin & (1<<Btn_bit);
		spi_reg = 1;
		send_spi(spi_reg);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	ef df       	rcall	.-34     	; 0x8c <send_spi>
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x2>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
