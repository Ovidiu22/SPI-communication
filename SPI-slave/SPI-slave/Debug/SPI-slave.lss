
SPI-slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000815  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000711  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000092b  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006df8  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  000088a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000088e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002a3d  00000000  00000000  0000891a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	10 d0       	rcall	.+32     	; 0x96 <main>
  76:	19 c0       	rjmp	.+50     	; 0xaa <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <init_SPI>:
Outputs:	none
Description:Initialization of SPI pins
******************************************************************** */
void init_SPI()
{
	DDRB = (1<<MISOPin) ;
  7a:	88 e0       	ldi	r24, 0x08	; 8
  7c:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1 << SPE);		// Enable SPI as slave
  7e:	8c b5       	in	r24, 0x2c	; 44
  80:	80 64       	ori	r24, 0x40	; 64
  82:	8c bd       	out	0x2c, r24	; 44
  84:	08 95       	ret

00000086 <spi_tranceiver>:
Description:Loads data into SPI transceiver buffer and returns received data
******************************************************************** */
uint8_t spi_tranceiver (uint8_t data)
{
	/* Load data in the buffer */
	SPDR = data;
  86:	8e bd       	out	0x2e, r24	; 46
	/* Wait for the complete transmission */
	while(!(SPSR & (1<<SPIF)));
  88:	0d b4       	in	r0, 0x2d	; 45
  8a:	07 fe       	sbrs	r0, 7
  8c:	fd cf       	rjmp	.-6      	; 0x88 <spi_tranceiver+0x2>
	/* Return received data */
	return SPDR;
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	08 95       	ret

00000092 <init_LED>:
Outputs:	none
Description:initializes the LED
******************************************************************** */
void init_LED(void)
{
	DDRD |= (1<<LED_pin);
  92:	55 9a       	sbi	0x0a, 5	; 10
  94:	08 95       	ret

00000096 <main>:

/*-------------- Main function ----------------*/
int main (void)
{
	uint8_t spi_res = 0;
	init_LED();		// LED initialization
  96:	fd df       	rcall	.-6      	; 0x92 <init_LED>
	init_SPI();		// SPI initialization
  98:	f0 df       	rcall	.-32     	; 0x7a <init_SPI>

	while (1)
	{
		spi_res = spi_tranceiver(0xFF);	// Send back to master 0xFF as dummy
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	f4 df       	rcall	.-24     	; 0x86 <spi_tranceiver>
  9e:	88 23       	and	r24, r24
		if (spi_res > 0)	// if button is pressed
  a0:	11 f0       	breq	.+4      	; 0xa6 <main+0x10>
  a2:	5d 9a       	sbi	0x0b, 5	; 11
		{
			set_LED_high;	// Turn on LED
  a4:	fa cf       	rjmp	.-12     	; 0x9a <main+0x4>
  a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		else
		{
			set_LED_low;	// Turn off LED
  a8:	f8 cf       	rjmp	.-16     	; 0x9a <main+0x4>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
